<!DOCTYPE html>
<html>
  <head>
    <title>Автомойки &laquo;Эталон&raquo;</title>
	<link rel="icon" type="image/png" href="/favicon.png" />
    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
	<script type="text/javascript">
	  var declOfNum = function(number, titles) {  
		  cases = [2, 0, 1, 1, 1, 2];  
		  return titles[ (number%100>4 && number%100<20)? 2 : cases[(number%10<5)?number%10:5] ];  
	  } 
	  var getPeriod = function(end){
		if (!end) {
		  end = '01 Jan 2016 00:00:00 GMT+0300';
		}
		end = new Date(end);
		var now = new Date();
		var diff = end - now;
		var p = {
		  s: 1000,
		  m: 1000 * 60,
		  h: 1000 * 60 * 60,
		  d: 1000 * 60 * 60 * 24
		};
		var day = Math.floor(diff / p.d);
		var hrs = Math.floor((diff - day * p.d) / p.h);
		var min = Math.floor((diff - day * p.d - hrs * p.h) / p.m);
		var sec = Math.floor((diff - day * p.d - hrs * p.h - min * p.m) / p.s);
		var ar = [
		  day, declOfNum(day, ['день', 'дня', 'дней']),
		  hrs, declOfNum(hrs, ['час', 'часа', 'часов']),
		  min, declOfNum(min, ['минута', 'минуты', 'минут']),
		  sec, declOfNum(sec, ['секунда', 'секунды', 'секунд'])
		]
		return ar.join(' ');
	  }
	  
	  
	  setInterval(function(){
		var el = document.getElementById('notice');
		el.innerHTML = 'До окончания тестового периода осталось: ' + getPeriod();
	  }, 1000);
	</script>
    
    <!--  
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage 
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/linker/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.
        
        To customize any part of the built-in behavior, just edit your Gruntfile.
        For example, here are a few things you could do:
            
            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <!--STYLES-->
    <link rel="stylesheet" href="/styles/importer.css">
    <link rel="stylesheet" href="/styles/jquery.growl.css">
    <link rel="stylesheet" href="/styles/semantic.min.css">
    <!--STYLES END-->
  </head>

  <body>
	<div style='height: 30px; background: red; color: white; font: bold 11pt/30px Arial; text-align: center' id='notice'></div>
    <%- body %>

  

    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/linker/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).
        
        To customize this behavior to fit your needs, just edit your Gruntfile.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    <script type="text/javascript" src="/jst.js"></script>
    <!--TEMPLATES END-->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can 
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, filesin your `assets/linker/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.
      
      To customize any part of the built-in behavior, just edit your Gruntfile.
      For example, here are a few things you could do:
          
          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->
    <!--SCRIPTS!-->
    <!--SCRIPTS! END-->
  </body>
</html>

